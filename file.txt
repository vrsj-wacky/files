/**
 *
 * DatePage
 *
 */

import React from 'react';
import PropTypes from 'prop-types';
import { connect } from 'react-redux';
import { createStructuredSelector } from 'reselect';
import { compose } from 'redux';

import injectSaga from 'utils/injectSaga';
import injectReducer from 'utils/injectReducer';
import makeSelectDatePage from './selectors';
import reducer from './reducer';
import saga from './saga';

import { withStyles } from '@material-ui/core/styles';
import TextField from '@material-ui/core/TextField';

import DatePicker from 'react-datepicker';
import 'react-datepicker/dist/react-datepicker.css';

/* eslint-disable react/prefer-stateless-function */

const styles = theme => ({
  container: {
    display: 'flex',
    flexWrap: 'wrap',
  },
  textField: {
    marginLeft: theme.spacing.unit,
    marginRight: theme.spacing.unit,
    width: 200,
  },
});

export class DatePage extends React.PureComponent {
  constructor(props) {
    super(props);
    this.state = {
      startDate: new Date()
    };
    this.handleChange = this.handleChange.bind(this);
  }

  handleChange(date) {
    this.setState({
      startDate: date
    });
  }
  render() {
    const { classes } = this.props; 
    const today = new Date().toISOString().slice(0, 10)
    return (
      <div>
        <div>
          <form className={classes.container} noValidate>
            <TextField
              id="date"
              label="Start Date"
              type="date"
              defaultValue={today}
              className={classes.textField}
              InputLabelProps={{
                shrink: true,
              }}
            />
            <TextField
              id="date"
              label="End Date"
              type="date"
              defaultValue={today}
              className={classes.textField}
              InputLabelProps={{
                shrink: true,
              }}
            />
          </form>
        </div>
        <DatePicker
        selected={this.state.startDate}
        onChange={this.handleChange}
        maxDate={new Date()}
      />
      </div>
    );
  }
}

DatePage.propTypes = {
  dispatch: PropTypes.func.isRequired,
  classes: PropTypes.object.isRequired,
};

const mapStateToProps = createStructuredSelector({
  datePage: makeSelectDatePage(),
});

function mapDispatchToProps(dispatch) {
  return {
    dispatch,
  };
}

const withConnect = connect(
  mapStateToProps,
  mapDispatchToProps,
);

const withReducer = injectReducer({ key: 'datePage', reducer });
const withSaga = injectSaga({ key: 'datePage', saga });

export default compose(
  withStyles(styles),
  withReducer,
  withSaga,
  withConnect,
)(DatePage);
